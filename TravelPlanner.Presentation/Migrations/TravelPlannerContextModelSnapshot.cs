// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TravelPlanner.Persistence;

namespace TravelPlanner.Presentation.Migrations
{
    [DbContext(typeof(TravelPlannerContext))]
    partial class TravelPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelPlanner.Shared.Entities.TravelUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Picture");

                    b.Property<string>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelPlanner.Shared.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Destination");

                    b.Property<DateTime>("EndDate");

                    b.Property<double>("Lat");

                    b.Property<double>("Lng");

                    b.Property<string>("SightseeingsCollection");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TravelUserId");

                    b.HasKey("Id");

                    b.HasIndex("TravelUserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TravelPlanner.Shared.Entities.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TravelPlanner.Shared.Entities.TravelUser", b =>
                {
                    b.HasOne("TravelPlanner.Shared.Entities.UserRole")
                        .WithMany("TravelUsers")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("TravelPlanner.Shared.Entities.Trip", b =>
                {
                    b.HasOne("TravelPlanner.Shared.Entities.TravelUser", "TravelUser")
                        .WithMany("Trips")
                        .HasForeignKey("TravelUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
